// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kong/pg-aurora-client/internal/store/ent/aurorahealthcheck"
	"github.com/kong/pg-aurora-client/internal/store/ent/predicate"
)

// AuroraHealthCheckUpdate is the builder for updating AuroraHealthCheck entities.
type AuroraHealthCheckUpdate struct {
	config
	hooks    []Hook
	mutation *AuroraHealthCheckMutation
}

// Where appends a list predicates to the AuroraHealthCheckUpdate builder.
func (ahcu *AuroraHealthCheckUpdate) Where(ps ...predicate.AuroraHealthCheck) *AuroraHealthCheckUpdate {
	ahcu.mutation.Where(ps...)
	return ahcu
}

// SetTs sets the "ts" field.
func (ahcu *AuroraHealthCheckUpdate) SetTs(t time.Time) *AuroraHealthCheckUpdate {
	ahcu.mutation.SetTs(t)
	return ahcu
}

// SetNillableTs sets the "ts" field if the given value is not nil.
func (ahcu *AuroraHealthCheckUpdate) SetNillableTs(t *time.Time) *AuroraHealthCheckUpdate {
	if t != nil {
		ahcu.SetTs(*t)
	}
	return ahcu
}

// Mutation returns the AuroraHealthCheckMutation object of the builder.
func (ahcu *AuroraHealthCheckUpdate) Mutation() *AuroraHealthCheckMutation {
	return ahcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahcu *AuroraHealthCheckUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AuroraHealthCheckMutation](ctx, ahcu.sqlSave, ahcu.mutation, ahcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahcu *AuroraHealthCheckUpdate) SaveX(ctx context.Context) int {
	affected, err := ahcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahcu *AuroraHealthCheckUpdate) Exec(ctx context.Context) error {
	_, err := ahcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcu *AuroraHealthCheckUpdate) ExecX(ctx context.Context) {
	if err := ahcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahcu *AuroraHealthCheckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(aurorahealthcheck.Table, aurorahealthcheck.Columns, sqlgraph.NewFieldSpec(aurorahealthcheck.FieldID, field.TypeInt))
	if ps := ahcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahcu.mutation.Ts(); ok {
		_spec.SetField(aurorahealthcheck.FieldTs, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aurorahealthcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahcu.mutation.done = true
	return n, nil
}

// AuroraHealthCheckUpdateOne is the builder for updating a single AuroraHealthCheck entity.
type AuroraHealthCheckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuroraHealthCheckMutation
}

// SetTs sets the "ts" field.
func (ahcuo *AuroraHealthCheckUpdateOne) SetTs(t time.Time) *AuroraHealthCheckUpdateOne {
	ahcuo.mutation.SetTs(t)
	return ahcuo
}

// SetNillableTs sets the "ts" field if the given value is not nil.
func (ahcuo *AuroraHealthCheckUpdateOne) SetNillableTs(t *time.Time) *AuroraHealthCheckUpdateOne {
	if t != nil {
		ahcuo.SetTs(*t)
	}
	return ahcuo
}

// Mutation returns the AuroraHealthCheckMutation object of the builder.
func (ahcuo *AuroraHealthCheckUpdateOne) Mutation() *AuroraHealthCheckMutation {
	return ahcuo.mutation
}

// Where appends a list predicates to the AuroraHealthCheckUpdate builder.
func (ahcuo *AuroraHealthCheckUpdateOne) Where(ps ...predicate.AuroraHealthCheck) *AuroraHealthCheckUpdateOne {
	ahcuo.mutation.Where(ps...)
	return ahcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahcuo *AuroraHealthCheckUpdateOne) Select(field string, fields ...string) *AuroraHealthCheckUpdateOne {
	ahcuo.fields = append([]string{field}, fields...)
	return ahcuo
}

// Save executes the query and returns the updated AuroraHealthCheck entity.
func (ahcuo *AuroraHealthCheckUpdateOne) Save(ctx context.Context) (*AuroraHealthCheck, error) {
	return withHooks[*AuroraHealthCheck, AuroraHealthCheckMutation](ctx, ahcuo.sqlSave, ahcuo.mutation, ahcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahcuo *AuroraHealthCheckUpdateOne) SaveX(ctx context.Context) *AuroraHealthCheck {
	node, err := ahcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahcuo *AuroraHealthCheckUpdateOne) Exec(ctx context.Context) error {
	_, err := ahcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcuo *AuroraHealthCheckUpdateOne) ExecX(ctx context.Context) {
	if err := ahcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahcuo *AuroraHealthCheckUpdateOne) sqlSave(ctx context.Context) (_node *AuroraHealthCheck, err error) {
	_spec := sqlgraph.NewUpdateSpec(aurorahealthcheck.Table, aurorahealthcheck.Columns, sqlgraph.NewFieldSpec(aurorahealthcheck.FieldID, field.TypeInt))
	id, ok := ahcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuroraHealthCheck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aurorahealthcheck.FieldID)
		for _, f := range fields {
			if !aurorahealthcheck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != aurorahealthcheck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahcuo.mutation.Ts(); ok {
		_spec.SetField(aurorahealthcheck.FieldTs, field.TypeTime, value)
	}
	_node = &AuroraHealthCheck{config: ahcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aurorahealthcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahcuo.mutation.done = true
	return _node, nil
}
