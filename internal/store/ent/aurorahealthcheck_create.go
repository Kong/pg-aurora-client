// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kong/pg-aurora-client/internal/store/ent/aurorahealthcheck"
)

// AuroraHealthCheckCreate is the builder for creating a AuroraHealthCheck entity.
type AuroraHealthCheckCreate struct {
	config
	mutation *AuroraHealthCheckMutation
	hooks    []Hook
}

// SetTs sets the "ts" field.
func (ahcc *AuroraHealthCheckCreate) SetTs(t time.Time) *AuroraHealthCheckCreate {
	ahcc.mutation.SetTs(t)
	return ahcc
}

// SetNillableTs sets the "ts" field if the given value is not nil.
func (ahcc *AuroraHealthCheckCreate) SetNillableTs(t *time.Time) *AuroraHealthCheckCreate {
	if t != nil {
		ahcc.SetTs(*t)
	}
	return ahcc
}

// SetID sets the "id" field.
func (ahcc *AuroraHealthCheckCreate) SetID(i int) *AuroraHealthCheckCreate {
	ahcc.mutation.SetID(i)
	return ahcc
}

// Mutation returns the AuroraHealthCheckMutation object of the builder.
func (ahcc *AuroraHealthCheckCreate) Mutation() *AuroraHealthCheckMutation {
	return ahcc.mutation
}

// Save creates the AuroraHealthCheck in the database.
func (ahcc *AuroraHealthCheckCreate) Save(ctx context.Context) (*AuroraHealthCheck, error) {
	ahcc.defaults()
	return withHooks[*AuroraHealthCheck, AuroraHealthCheckMutation](ctx, ahcc.sqlSave, ahcc.mutation, ahcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahcc *AuroraHealthCheckCreate) SaveX(ctx context.Context) *AuroraHealthCheck {
	v, err := ahcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcc *AuroraHealthCheckCreate) Exec(ctx context.Context) error {
	_, err := ahcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcc *AuroraHealthCheckCreate) ExecX(ctx context.Context) {
	if err := ahcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahcc *AuroraHealthCheckCreate) defaults() {
	if _, ok := ahcc.mutation.Ts(); !ok {
		v := aurorahealthcheck.DefaultTs()
		ahcc.mutation.SetTs(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahcc *AuroraHealthCheckCreate) check() error {
	if _, ok := ahcc.mutation.Ts(); !ok {
		return &ValidationError{Name: "ts", err: errors.New(`ent: missing required field "AuroraHealthCheck.ts"`)}
	}
	return nil
}

func (ahcc *AuroraHealthCheckCreate) sqlSave(ctx context.Context) (*AuroraHealthCheck, error) {
	if err := ahcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ahcc.mutation.id = &_node.ID
	ahcc.mutation.done = true
	return _node, nil
}

func (ahcc *AuroraHealthCheckCreate) createSpec() (*AuroraHealthCheck, *sqlgraph.CreateSpec) {
	var (
		_node = &AuroraHealthCheck{config: ahcc.config}
		_spec = sqlgraph.NewCreateSpec(aurorahealthcheck.Table, sqlgraph.NewFieldSpec(aurorahealthcheck.FieldID, field.TypeInt))
	)
	if id, ok := ahcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ahcc.mutation.Ts(); ok {
		_spec.SetField(aurorahealthcheck.FieldTs, field.TypeTime, value)
		_node.Ts = value
	}
	return _node, _spec
}

// AuroraHealthCheckCreateBulk is the builder for creating many AuroraHealthCheck entities in bulk.
type AuroraHealthCheckCreateBulk struct {
	config
	builders []*AuroraHealthCheckCreate
}

// Save creates the AuroraHealthCheck entities in the database.
func (ahccb *AuroraHealthCheckCreateBulk) Save(ctx context.Context) ([]*AuroraHealthCheck, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ahccb.builders))
	nodes := make([]*AuroraHealthCheck, len(ahccb.builders))
	mutators := make([]Mutator, len(ahccb.builders))
	for i := range ahccb.builders {
		func(i int, root context.Context) {
			builder := ahccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuroraHealthCheckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahccb *AuroraHealthCheckCreateBulk) SaveX(ctx context.Context) []*AuroraHealthCheck {
	v, err := ahccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahccb *AuroraHealthCheckCreateBulk) Exec(ctx context.Context) error {
	_, err := ahccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahccb *AuroraHealthCheckCreateBulk) ExecX(ctx context.Context) {
	if err := ahccb.Exec(ctx); err != nil {
		panic(err)
	}
}
