// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kong/pg-aurora-client/internal/store/ent/aurorahealthcheck"
)

// AuroraHealthCheck is the model entity for the AuroraHealthCheck schema.
type AuroraHealthCheck struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ts holds the value of the "ts" field.
	Ts time.Time `json:"ts,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuroraHealthCheck) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case aurorahealthcheck.FieldID:
			values[i] = new(sql.NullInt64)
		case aurorahealthcheck.FieldTs:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuroraHealthCheck", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuroraHealthCheck fields.
func (ahc *AuroraHealthCheck) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aurorahealthcheck.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ahc.ID = int(value.Int64)
		case aurorahealthcheck.FieldTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ts", values[i])
			} else if value.Valid {
				ahc.Ts = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuroraHealthCheck.
// Note that you need to call AuroraHealthCheck.Unwrap() before calling this method if this AuroraHealthCheck
// was returned from a transaction, and the transaction was committed or rolled back.
func (ahc *AuroraHealthCheck) Update() *AuroraHealthCheckUpdateOne {
	return NewAuroraHealthCheckClient(ahc.config).UpdateOne(ahc)
}

// Unwrap unwraps the AuroraHealthCheck entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ahc *AuroraHealthCheck) Unwrap() *AuroraHealthCheck {
	_tx, ok := ahc.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuroraHealthCheck is not a transactional entity")
	}
	ahc.config.driver = _tx.drv
	return ahc
}

// String implements the fmt.Stringer.
func (ahc *AuroraHealthCheck) String() string {
	var builder strings.Builder
	builder.WriteString("AuroraHealthCheck(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ahc.ID))
	builder.WriteString("ts=")
	builder.WriteString(ahc.Ts.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuroraHealthChecks is a parsable slice of AuroraHealthCheck.
type AuroraHealthChecks []*AuroraHealthCheck
