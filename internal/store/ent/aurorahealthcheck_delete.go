// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kong/pg-aurora-client/internal/store/ent/aurorahealthcheck"
	"github.com/kong/pg-aurora-client/internal/store/ent/predicate"
)

// AuroraHealthCheckDelete is the builder for deleting a AuroraHealthCheck entity.
type AuroraHealthCheckDelete struct {
	config
	hooks    []Hook
	mutation *AuroraHealthCheckMutation
}

// Where appends a list predicates to the AuroraHealthCheckDelete builder.
func (ahcd *AuroraHealthCheckDelete) Where(ps ...predicate.AuroraHealthCheck) *AuroraHealthCheckDelete {
	ahcd.mutation.Where(ps...)
	return ahcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ahcd *AuroraHealthCheckDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, AuroraHealthCheckMutation](ctx, ahcd.sqlExec, ahcd.mutation, ahcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcd *AuroraHealthCheckDelete) ExecX(ctx context.Context) int {
	n, err := ahcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ahcd *AuroraHealthCheckDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(aurorahealthcheck.Table, sqlgraph.NewFieldSpec(aurorahealthcheck.FieldID, field.TypeInt))
	if ps := ahcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ahcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ahcd.mutation.done = true
	return affected, err
}

// AuroraHealthCheckDeleteOne is the builder for deleting a single AuroraHealthCheck entity.
type AuroraHealthCheckDeleteOne struct {
	ahcd *AuroraHealthCheckDelete
}

// Where appends a list predicates to the AuroraHealthCheckDelete builder.
func (ahcdo *AuroraHealthCheckDeleteOne) Where(ps ...predicate.AuroraHealthCheck) *AuroraHealthCheckDeleteOne {
	ahcdo.ahcd.mutation.Where(ps...)
	return ahcdo
}

// Exec executes the deletion query.
func (ahcdo *AuroraHealthCheckDeleteOne) Exec(ctx context.Context) error {
	n, err := ahcdo.ahcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{aurorahealthcheck.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcdo *AuroraHealthCheckDeleteOne) ExecX(ctx context.Context) {
	if err := ahcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
