// Code generated by ent, DO NOT EDIT.

package aurorahealthcheck

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kong/pg-aurora-client/internal/store/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldLTE(FieldID, id))
}

// Ts applies equality check predicate on the "ts" field. It's identical to TsEQ.
func Ts(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldEQ(FieldTs, v))
}

// TsEQ applies the EQ predicate on the "ts" field.
func TsEQ(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldEQ(FieldTs, v))
}

// TsNEQ applies the NEQ predicate on the "ts" field.
func TsNEQ(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldNEQ(FieldTs, v))
}

// TsIn applies the In predicate on the "ts" field.
func TsIn(vs ...time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldIn(FieldTs, vs...))
}

// TsNotIn applies the NotIn predicate on the "ts" field.
func TsNotIn(vs ...time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldNotIn(FieldTs, vs...))
}

// TsGT applies the GT predicate on the "ts" field.
func TsGT(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldGT(FieldTs, v))
}

// TsGTE applies the GTE predicate on the "ts" field.
func TsGTE(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldGTE(FieldTs, v))
}

// TsLT applies the LT predicate on the "ts" field.
func TsLT(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldLT(FieldTs, v))
}

// TsLTE applies the LTE predicate on the "ts" field.
func TsLTE(v time.Time) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(sql.FieldLTE(FieldTs, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuroraHealthCheck) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuroraHealthCheck) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuroraHealthCheck) predicate.AuroraHealthCheck {
	return predicate.AuroraHealthCheck(func(s *sql.Selector) {
		p(s.Not())
	})
}
